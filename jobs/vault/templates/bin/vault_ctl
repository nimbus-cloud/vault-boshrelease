#!/bin/bash

set -e # exit immediately if a simple command exits with a non-zero status
set -u # report the usage of uninitialized variables

# Setup env vars and folders for the webapp_ctl script
source /var/vcap/jobs/vault/helpers/ctl_setup.sh 'vault'

export PORT=${PORT:-5000}
export LANG=en_US.UTF-8
export PATH=$PATH:/var/vcap/packges/ttar/bin

inflate_certs() {
	# reconstitute certs based on ttar file
	mkdir -p ${JOB_DIR}/tls
	ttar < ${JOB_DIR}/tls/certs.ttar
}

<%
  schema = "http"
  if_p("vault.listener.tcp.tls.certificate", "") do |cert|
    if_p("vault.listener.tcp.tls.key", "") do |key|
      if cert != "" and key != ""
        schema = "https"
      end
    end
  end

  local_addr=""
  unless p("vault.ha.domain","").empty?
    hostname = p("vault.ha.name").gsub('(deployment)', spec.deployment.to_s).gsub('(index)', spec.index.to_s)
    local_addr = "#{schema}://#{hostname}.#{p("vault.ha.domain")}:#{p("vault.listener.tcp.port")}"
  end
%>

case $1 in

  start)
    pid_guard $PIDFILE $JOB_NAME
    inflate_certs

    vault server -config=$JOB_DIR/config/server.hcl >> $LOG_DIR/$JOB_NAME.log &

    echo $! > $PIDFILE
    <% unless p("vault.unseal_key").empty? %>
    for i in 1 2 3 4 5
    do

        set +e
        OUTPUT=$(VAULT_ADDR='<%= local_addr %>' vault status | grep "Sealed: false")
        set -e

        if [ "$OUTPUT" == "Sealed: false" ]
        then
            echo "Vault unsealed"
            break
        else
            echo "Vault sealed, unsealing"
            set +e
            VAULT_ADDR='<%= local_addr %>' vault unseal '<%= p("vault.unseal_key") %>'
            set -e
            sleep 2
        fi

    done
    <% end %>

    ;;

  stop)
    if [[ "${VAULT_TOKEN}" != "" ]]; then
      vault step-down
    fi
    kill_and_wait $PIDFILE

    ;;
  *)
    echo "Usage: vault_ctl {start|stop}"

    ;;

esac
exit 0
